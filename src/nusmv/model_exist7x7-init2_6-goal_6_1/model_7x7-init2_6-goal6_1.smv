MODULE main

  DEFINE

     grid := [[0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0]];
     N := 7;
     M := 7;


  VAR

     i : 0..6;
     j : 0..6;
     action : {no-action, up, right-up, left-up, down, right-down, left-down, left, right};


  ASSIGN

      init(i) := 2;
      init(j) := 6;
      init(action) := no-action;



      next(action) := case
                      grid[i][j] = 1 : no-action;
                     (i = 0) & (j = 0) : {right-down};
                     (i = 0) & (j = 3) : {right, left-down};
                     (i = 0) & (j = 4) : {right-down, left};
                     (i = 1) & (j = 1) : {right, right-down, left-up, left-down};
                     (i = 1) & (j = 2) : {down, left, right-up};
                     (i = 1) & (j = 5) : {right-down, left-up, down, left-down};
                     (i = 2) & (j = 0) : {right-down, down, right-up};
                     (i = 2) & (j = 2) : {right-down, up, left-up, left-down};
                     (i = 2) & (j = 4) : {right, right-up, down, left-down};
                     (i = 2) & (j = 5) : {right, up, left, left-down};
                     (i = 2) & (j = 6) : {left-up, left};
                     (i = 3) & (j = 0) : {right, up, right-down, down};
                     (i = 3) & (j = 1) : {left-up, down, right-up, left, left-down};
                     (i = 3) & (j = 3) : {right, left-up, right-up};
                     (i = 3) & (j = 4) : {up, right-down, left, right-up};
                     (i = 4) & (j = 0) : {right, up, right-down, right-up};
                     (i = 4) & (j = 1) : {up, left-up, down, left};
                     (i = 4) & (j = 5) : {right, right-down, left-up, left-down};
                     (i = 4) & (j = 6) : {down, left};
                     (i = 5) & (j = 1) : {up, left-up, down};
                     (i = 5) & (j = 4) : {down, right-up};
                     (i = 5) & (j = 6) : {up, left-up, down};
                     (i = 6) & (j = 4) : {up};
                     (i = 6) & (j = 6) : {up};
                     TRUE : no-action;
                     esac;

      next(i) := case
               ((next(action) = down) | (next(action) = right-down) | (next(action) = left-down)) & (i + 1 < N) : i + 1;
               ((next(action) = up) | (next(action) = right-up) | (next(action) = left-up)) & (i - 1 >= 0): i - 1;
               TRUE : i;
               esac;

      next(j) := case
               ((next(action) = right) | (next(action) = right-up) | (next(action) = right-down)) & (j + 1 < M): j + 1;
               ((next(action) = left) | (next(action) = left-up) | (next(action) = left-down)) & (j - 1 >= 0) : j - 1;
               TRUE : j;
               esac;


   LTLSPEC

      !(F ((i = 6) & (j = 1)))
